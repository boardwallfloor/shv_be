// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"

	null_v4 "gopkg.in/guregu/null.v4"
)

const createArticle = `-- name: CreateArticle :execresult
INSERT INTO articles (
  title, content, category, status
) VALUES (
  ?, ?, ?, ?
)
`

type CreateArticleParams struct {
	Title    string         `json:"title"`
	Content  null_v4.String `json:"content"`
	Category null_v4.String `json:"category"`
	Status   ArticlesStatus `json:"status"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createArticle,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.Status,
	)
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, content, category, created_date, updated_date, status FROM articles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int32) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.Status,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, title, content, category, created_date, updated_date, status FROM articles
ORDER BY created_date DESC
LIMIT ?
OFFSET ?
`

type ListArticlesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			&i.CreatedDate,
			&i.UpdatedDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles
SET 
  title = ?,
  content = ?,
  category = ?,
  status = ?
WHERE id = ?
`

type UpdateArticleParams struct {
	Title    string         `json:"title"`
	Content  null_v4.String `json:"content"`
	Category null_v4.String `json:"category"`
	Status   ArticlesStatus `json:"status"`
	ID       int32          `json:"id"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.ExecContext(ctx, updateArticle,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.Status,
		arg.ID,
	)
	return err
}
