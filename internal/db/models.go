// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql/driver"
	"fmt"

	null_v4 "gopkg.in/guregu/null.v4"
)

type ArticlesStatus string

const (
	ArticlesStatusPublish ArticlesStatus = "Publish"
	ArticlesStatusDraft   ArticlesStatus = "Draft"
	ArticlesStatusTrash   ArticlesStatus = "Trash"
)

func (e *ArticlesStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArticlesStatus(s)
	case string:
		*e = ArticlesStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ArticlesStatus: %T", src)
	}
	return nil
}

type NullArticlesStatus struct {
	ArticlesStatus ArticlesStatus `json:"articles_status"`
	Valid          bool           `json:"valid"` // Valid is true if ArticlesStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArticlesStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ArticlesStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArticlesStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArticlesStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArticlesStatus), nil
}

type Article struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Content     null_v4.String `json:"content"`
	Category    null_v4.String `json:"category"`
	CreatedDate null_v4.Time   `json:"created_date"`
	UpdatedDate null_v4.Time   `json:"updated_date"`
	Status      ArticlesStatus `json:"status"`
}
